/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

option go_package = "github.com/hyperledger/fabric/protos/token";
option java_package = "org.hyperledger.fabric.protos.token";

package token;

import "google/protobuf/timestamp.proto";
import "token/operations.proto";
import "token/transaction.proto";



// IssueRequest is used to request token issuance
message IssueRequest {
    // Credential contains information about the party who is requesting the operation
    // the content of this field depends on the charateristic of the token manager system used.
    bytes credential = 1;

    // TokensToIssue contains the information about the tokens to be issued
    repeated Token tokens_to_issue = 2;
}

// RecipientShare describes how much a recipient will receive in a token transfer
message RecipientShare {
    // Recipient refers to the prospective owner of a transferred token
    TokenOwner recipient = 1;

    // Quantity refers to the number of token units to be transferred to the recipient.
    // It is encoded as a string whose prefix determines the actual conversion base. A prefix of
    // ``0x'' or ``0X'' selects base 16; the ``0'' prefix selects base 8, and a
    // ``0b'' or ``0B'' prefix selects base 2. Otherwise the selected base is 10.
    string quantity = 2;
}

// TokenTransactions is a container for token transactions
message TokenTransactions {
    repeated TokenTransaction txs = 1;
}

// TransferRequest is used to request token transfers
message TransferRequest {
    // Credential is the public credential of the requestor of the transfer
    // The content of this field depends on the characteristic of token manager system
    bytes credential = 1;

    // TokenIds identifies the tokens to be transferred
    repeated TokenId token_ids = 2;

    // Shares identify the prospective recipients and the quantity of tokens that each would receive
    repeated RecipientShare shares = 3;
}

// RedeemRequest is used to request token redemption
message RedeemRequest {
    // Credential is the public credential of the requestor of the redemption
    // The content of this field depends on the characteristic of token manager system
    bytes credential = 1;

    // TokenIds identifies the tokens to be redeemed
    repeated TokenId token_ids = 2;

    // Quantity refers to the number of units of a given token needs to be redeemed.
    // It is encoded as a string whose prefix determines the actual conversion base. A prefix of
    // ``0x'' or ``0X'' selects base 16; the ``0'' prefix selects base 8, and a
    // ``0b'' or ``0B'' prefix selects base 2. Otherwise the selected base is 10.
    string quantity = 3;
}

// UnspentToken is used to specify a token returned by ListRequest
message UnspentToken {
    // Id is used to uniquely identify the token in the ledger
    TokenId id = 1;

    // Type is the type of the token
    string type = 2;

    // Quantity represents the number of units of Type that this unspent token holds.
    // It is formatted in decimal representation
    string quantity = 3;
}

// UnspentTokens is used to hold the output of ListRequest
message UnspentTokens {
    // Tokens is an array of UnspentToken
    repeated UnspentToken tokens = 1;
}

// ListRequest is used to retrieve the unspent tokens belonging to the party holding Credential
message ListRequest {
    // Credential refers to the public credential of the party whose unspent tokens is to be listed
    bytes credential = 1;
}

// TokenOperationRequest is used to ask the prover peer to perform a specific
// token operation using given token ids. In this way, the prover peer can assemble
// token transactions as requested by a chaincode.
message TokenOperationRequest {
    // credential contains information for the party who is requesting the operation
    // The content of this field depends on the characteristic of token manager system
    bytes credential = 1;

    // operations contains the token operations to be performed
    repeated TokenOperation operations = 2;

    // TokenIds are the token identifiers used for the operation. It is empty,
    // in the case of an issue. It must not be empty for operations like transfer or redeem.
    repeated TokenId token_ids = 3;
}

// Header is a generic replay prevention and identity message to include in a signed command
message Header {
    // Timestamp is the local time when the message was created
    // by the sender
    google.protobuf.Timestamp timestamp = 1;

    // ChannelId identifies the channel this message is meant for
    string channel_id = 2;

    // Nonce is a sufficientley long random value
    // used to ensure the request has enough entropy.
    bytes nonce = 3;

    // Creator of the message.
    // Typically, a marshaled msp.SerializedIdentity
    bytes creator = 4;

    // TlsCertHash represents the hash of the client's TLS certificate
    // when mutual TLS is enabled
    bytes tls_cert_hash = 5;
}


// Command describes the type of operation that a client is requesting.
message Command {
    // Header is the header of this command
    Header header = 1;

    // Payload is the payload of this command. It can assume one of the following value
    oneof payload {
        IssueRequest issue_request = 2;
        TransferRequest transfer_request = 3;
        ListRequest list_request = 4;
        RedeemRequest redeem_request = 5;
        TokenOperationRequest token_operation_request = 6;
    }
}

// SignedCommand is a command that carries the signature of the command's creator.
message SignedCommand {
    // Command is the serialised version of a Command message
    bytes command = 1;

    // Signature is the signature over command
    bytes signature = 2;
}

message CommandResponseHeader {
    // Timestamp is the time that the message
    // was created as  defined by the sender
    google.protobuf.Timestamp timestamp = 1;

    // CommandHash is the hash computed on the concatenation of the SignedCommand's command and signature fields.
    // If not specified differently, SHA256 is used
    // The hash is used to link a response with its request, both for bookeeping purposes on an
    // asynchronous system and for security reasons (accountability, non-repudiation)
    bytes command_hash = 2;

    // Creator is the identity of the party creating this message
    bytes creator = 3;
}

// Error reports an application error
message Error {
    // Message associated with this response.
    string message = 1;

    // Payload that can be used to include metadata with this response.
    bytes payload = 2;
}

// A CommnandResponse is returned from a prover to the command submitter.
message CommandResponse {
    // Header of the response.
    CommandResponseHeader header = 1;

    // Payload of the response.
    oneof payload {
        Error err = 2;
        TokenTransaction token_transaction = 3;
        UnspentTokens unspent_tokens = 4;
        TokenTransactions token_transactions = 5;
    }
}

// SignedCommandResponse is a signed command response
message SignedCommandResponse {
    // Response is the serialised version of a CommandResponse message
    bytes response = 1;

    // Signature is the signature over command
    bytes signature = 2;
}

// Prover provides support to clients for the creation of FabToken transactions,
// and to query the ledger.
service Prover {
    // ProcessCommand processes the passed command ensuring proper access control.
    // The returned response allows the client to understand if the
    // operation was succeffully executed and if not, the response
    // reports the reason of the failure.
    rpc ProcessCommand(SignedCommand) returns (SignedCommandResponse);
}
